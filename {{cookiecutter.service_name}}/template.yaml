AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {{cookiecutter.service_name}}

  {{cookiecutter.service_description}}

Parameters:
  LogLevel:
    Type: String
    Description: "Log level for functions; used internally in code."
    Default: 'INFO'
    AllowedValues:
      - 'DEBUG'
      - 'INFO'
      - 'WARNING'
      - 'ERROR'
      - 'CRITICAL'

{% if cookiecutter.event_source != "other" %}
  ## Event source configuration
{%- if cookiecutter.event_source == "cloudwatch-logs" %}
  EventCloudwatchLogGroupName:
    Type: String
    Description: "Name of triggering log group"
    #Default: <<LOGGROUP_NAME>>

  # NOTE: A filterPattern is optional
  #EventCloudwatchLogGroupFilterPattern:
  #  Type: String
  #  Default: <<FILTER_PATTERN>>
{%- elif cookiecutter.event_source == "dynamodb" %}
  EventDynamoDBStreamArn:
    Type: String
    Description: "ARN of stream"
    #Default: <<required: STREAM_ARN>>

  EventDynamoDBStreamStartingPosition:
    Type: String
    Description: "Stream starting position for function"
    AllowedValues:
      - 'LATEST'
      - 'TRIM_HORIZON'
    Default: 'LATEST'

  EventDynamoDBStreamBatchSize:
    Type: String
    Description: "Size of event batch"
    Default: 100

  # FIXME: Need a Condition block for this.
  EventDynamoDBStreamEnabled:
    Type: String
    Description: "If processing is enabled"
    AllowedValues:
      - True
      - False
    Default: True

{%- elif cookiecutter.event_source == "kinesis" %}
  EventKinesisStreamArn:
    Type: String
    Description: "ARN of stream"
    #Default: <<required: STREAM_ARN>>

  EventKinesisStreamStartingPosition:
    Type: String
    Description: "Stream starting position for function"
    AllowedValues:
      - 'LATEST'
      - 'TRIM_HORIZON'
    Default: 'LATEST'

  EventKinesisStreamBatchSize:
    Type: String
    Description: "Size of event batch"
    Default: 100

  # FIXME: Need a Condition block for this.
  EventKinesisStreamEnabled:
    Type: String
    Description: "If processing is enabled"
    AllowedValues:
      - True
      - False
    Default: True

{%- elif cookiecutter.event_source == "s3" %}
  EventS3Bucket:
    Type: String
    Description: "S3 bucket name"
    #Default: <<required: BUCKET_NAME>>

  EventS3EventsList:
    Type: List
    Description: "List of events to trigger on"
    AllowedValues:
      - s3:ObjectCreated:*
      - s3:ObjectCreated:Put
      - s3:ObjectCreated:Post
      - s3:ObjectCreated:Copy
      - s3:ObjectCreated:CompleteMultipartUpload
      - s3:ObjectRemoved:*
      - s3:ObjectRemoved:Delete
      - s3:ObjectRemoved:DeleteMarkerCreated
      - s3:ObjectRestore:Post
      - s3:ObjectRestore:Completed
      - s3:ReducedRedundancyLostObject
    #Default:
    #  - <<required: EVENT>>

  #EventS3FilterRuleList:
  #  Type: List
  #  Description: "List of event filter rules."
  #  Default:
  #    - <<FILTER_RULE>>
{%- elif cookiecutter.event_source == "schedule" %}
  EventSchedule:
    Type: String
    Description: "event schedule"
    #Default: <<required: SCHEDULE>>
{%- elif cookiecutter.event_source == "sns" %}
  EventSnsTopicArn:
    Type: String
    Description: "SNS Topic Arn"
    #Default: <<required: SNS_TOPIC_ARN>>

{%- elif cookiecutter.event_source == "sqs" %}
  EventSqsQueueArn:
    Type: String
    Description: "ARN of stream"
    #Default: <<required: STREAM_ARN>>

  EventSqsQueueBatchSize:
    Type: String
    Description: "Size of event batch"
    Default: 10

  # FIXME: Need a Condition block for this.
  EventSqsQueueEnabled:
    Type: String
    Description: "If processing is enabled"
    AllowedValues:
      - True
      - False
    Default: True
{%- endif -%}
{%- endif %}

{%- if cookiecutter.event_destination != "other" %}
  ## Event destination configurattion
  #
  # NOTE: The parameters here may not be an exhaustive list of possible
  # configuration. Refer to CloudFormation documentation for more.
{%- if cookiecutter.event_destination == "dynamodb" %}
  DdbHashKeyName:
    Type: String
    Description: "DDB table hash key name"
    #Default: <<required: HASH_KEY_NAME>>

  DdbHashKeyType:
    Type: String
    Description: "DDB table hash key name"
    AllowedValues:
      - "S"
      - "N"
      - "B"
    #Default: <<required: HASH_KEY_TYPE>>

  # Optional range key information
  #DdbRangeKeyName:
  #  Type: String
  #  Description: "DDB table hash key name"
  #  Default: <<required: RANGE_KEY_NAME>>

  #DdbRangeKeyType:
  #  Type: String
  #  Description: "DDB table range key type"
  #  AllowedValues:
  #    - "S"
  #    - "N"
  #    - "B"
  #  Default: <<required: RANGE_KEY_TYPE>>

{%- elif cookiecutter.event_destination == "kinesis" %}
  KinesisStreamRetentionHours:
    Type: Number
    Description: "Kinesis stream retention period in hours"
    Default: 24

  KinesisStreamShardCount:
    Type: Number
    Description: "Kinesis stream shard count"
    #Default: <<required: SHARD_COUNT>>

{%- elif cookiecutter.event_destination == "s3" %}
  S3BucketAccessControl:
    Type: String
    Description: 'S3 bucket access control'
    AllowedValues:
      - 'private'
      - 'public-read'
      - 'public-read-write'
      - 'aws-exec-read'
      - 'authenticated-read'
      - 'bucket-owner-read'
      - 'bucket-owner-full-control'
      - 'log-delivery-write'
    Default: 'private'

  S3BucketVersioningStatus:
    Type: String
    Description: 'Bucket versioning status'
    Default: 'Suspended'

{%- endif -%}
{%- endif %}


Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        LOG_LEVEL:
          Ref: LogLevel
{%- if cookiecutter.enable_xray == "y" %}
    Tracing: Active
{%- endif %}


Resources:
  {{cookiecutter.function_name}}:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/{{cookiecutter.function_name}}
      Handler: function.handler
      Runtime: python3.7
{%- if cookiecutter.event_source != "other" %}
      Events:
{%- if cookiecutter.event_source == "apigateway" %}
        Apig:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            #Path: <<required: PATH>>
            #Method: <<required: METHOD>>
{%- elif cookiecutter.event_source == "cloudwatch-event" %}
        CloudWatchEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern: <<PATTERN_OBJECT>>
{%- elif cookiecutter.event_source == "cloudwatch-logs" %}
        CloudWatchLogs:
          Type: CloudWatchLogs
          Properties:
            LogGroupName:
              Ref: EventCloudwatchLogGroupName
            #FilterPattern:
            #  Ref: EventCloudwatchLogGroupFilterPattern
{%- elif cookiecutter.event_source == "dynamodb" %}
        DynamoDB:
          Type: DynamoDB
          Properties:
            Stream:
              Ref: EventDynamoDBStreamArn
            StartingPosition:
              Ref: EventDynamoDBStreamStartingPosition
            BatchSize:
              Ref: EventDynamoDBStreamBatchSize
            Enabled:
              Ref: EventDynamoDBStreamEnabled
{%- elif cookiecutter.event_source == "kinesis" %}
        Kinesis:
          Type: Kinesis
          Properties:
            Stream:
              Ref: EventKinesisStreamArn
            StartingPosition:
              Ref: EventKinesisStreamStartingPosition
            BatchSize:
              Ref: EventKinesisStreamBatchSize
            Enabled:
              Ref: EventKinesisStreamEnabled
{%- elif cookiecutter.event_source == "s3" %}
        S3:
          Type: S3
          Properties:
            Bucket:
              Ref: EventS3Bucket
            Events:
              Ref: EventS3EventsList
            #Filter:
            #  S3Key:
            #    Ref: EventS3FilterRuleList
{%- elif cookiecutter.event_source == "schedule" %}
        Schedule:
          Type: Schedule
          Properties:
            Schedule:
              Ref: EventSchedule
{%- elif cookiecutter.event_source == "sns" %}
        SNS:
          Type: SNS
          Properties:
            Topic:
              Ref: EventSnsTopicArn
            #FilterPolicy:
            #  <<FILTER_POLICY>>
{%- elif cookiecutter.event_source == "sqs" %}
        SQS:
          Type: SQS
          Properties:
            Queue:
              Ref: EventSqsQueueArn
            BatchSize:
              Ref: EventSqsQueueBatchSize
            Enabled:
              Ref: EventSqsQueueEnabled
{%- endif %}
{%- endif %}

{% if cookiecutter.event_source == "apigateway" %}
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: 'live'
      #DefinitionUri: swagger.yml
{%- endif %}

  {{cookiecutter.function_name}}Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ssm:GetParameters"
            Resource: "*"
{%- if cookiecutter.event_destination != "other" %}
{%- if cookiecutter.event_destination == "dynamodb" %}
          - Effect: "Allow"
            Action:
              - "dynanodb:<<DDB_ACTION>>"
            Resource:
              Fn::GetAtt:
                - DynamoDBTable
                - Arn
{%- elif cookiecutter.event_destination == "kinesis" %}
          - Effect: "Allow"
            Action:
              - "kinesis:<<KINESIS_ACTION>>"
            Resource:
              Fn::GetAtt:
                - KinesisStream
                - Arn
{%- elif cookiecutter.event_destination == "s3" %}
          - Effect: "Allow"
            Action:
              - "s3:<<S3_ACTION>>"
            Resource:
              Fn::GetAtt:
                - S3Bucket
                - Arn
{%- endif %}
{%- endif %}
      Roles:
        # This role is created implicitly by SAM.
        - Ref: {{cookiecutter.function_name}}Role


{% if cookiecutter.event_destination != "other" %}
{%- if cookiecutter.event_destination == "dynamodb" %}
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName:
            Ref: DdbHashKeyName
          AttributeType:
            Ref: DdbHashKeyType
        #- AttributeName:
        #    Ref: DdbRangeKeyName
        #  AttributeType:
        #    Ref: DdbRangeKeyType
      KeySchema:
        - AttributeName:
            Ref: DdbHashKeyName
          KeyType: "HASH"
        #- AttributeName:
        #    Ref: DdbRangeKeyName
        #  KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"

{%- elif cookiecutter.event_destination == "kinesis" %}
  KinesisStream:
    RetentionPeriodHours:
      Ref: KinesisStreamRetentionHours
    ShardCount:
      Ref: KinesisStreamShardCount

{%- elif cookiecutter.event_destination == "s3" %}
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl:
        Ref: S3BucketAccessControl
      VersioningConfiguration:
        Status:
          Ref: S3BucketVersioningStatus

{%- elif cookiecutter.event_destination == "sns" %}
{%- elif cookiecutter.event_destination == "sqs" %}
{%- endif %}
{%- endif %}


Outputs:
{%- if cookiecutter.event_source == "apigateway" %}
  # FIXME: Fix API root
  RestApiRoot:
    Description: "API Gateway endpoint URL for function"
    Value:
      Fn::Sub: "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
{%- endif %}

  {{cookiecutter.function_name}}Arn:
    Description: "Hello World Lambda Function ARN"
    Value:
      Fn::GetAtt: {{cookiecutter.function_name}}.Arn

